#ifndef _GSHADING_H_
#define _GSHADING_H_

#include <math.h>
#include "vecTypes.h"

//------------------------------------------------------------------------------------------------
// few useful functions
//------------------------------------------------------------------------------------------------

static inline float sign( float x )
{
    if( x< 0.0f ) return -1.0f;
    if( x> 0.0f ) return  1.0f;
    return 0.0f;
}

static inline float clamp( float a, float b, float x )
{
         if( x<a ) x = a;
	else if( x>b ) x = b;
	return x;
}

static inline float clamp01( float x )
{
    if( x<0.0f ) return 0.0f;
    if( x>1.0f ) return 1.0f;
    return x;
}

static inline float clamp1( float x )
{
    if( x<-1.0f ) return -1.0f;
    if( x> 1.0f ) return  1.0f;
    return x;
}

static inline int iclamp( int x, int a, int b )
{
         if( x<a ) x = a;
	else if( x>b ) x = b;
	return x;
}

static inline float step (float edge, float value)
{
    return value < edge ? 0.0f : 1.0f;
}

static inline float smoothstep5( float a, float b, float x )
{
    if( x<a ) return 0.0f;
    if( x>b ) return 1.0f;
    x = (x-a)/(b-a);

    return x*x*x*(x*(6.0f*x - 15.0f) + 10.0f);
}

static inline float smoothstep5( float a, float b, float x, int *region )
{
    if( x<a ) {region[0] = 0; return 0.0f; }
    if( x>b ) {region[0] = 1; return 1.0f; }
    x = (x-a)/(b-a);
    region[0] = 2;
    return x*x*x*(x*(6.0f*x - 15.0f) + 10.0f);
}

static inline float smoothstep( float a, float b, float x )
{
    if( x<a ) return 0.0f;
    if( x>b ) return 1.0f;
    x = (x-a)/(b-a);
    return x*x*(3.0f-2.0f*x);
}

static inline float smoothstep( float a, float b, float x, int *region )
{
    if( x<a ) {region[0] = 0; return 0.0f; }
    if( x>b ) {region[0] = 1; return 1.0f; }
    x = (x-a)/(b-a);
    region[0] = 2;
    return x*x*(3.0f-2.0f*x);
}

static inline float remap( float a, float b, float x )
{
    if( x<a ) return 0.0f;
    if( x>b ) return 1.0f;
    return (x-a)/(b-a);
}


static inline float mix( float a, float b, float x )
{
    return a*(1.0f-x) + b*x;
}

static inline float over( float a, float b, float alpha )
{
    return a * alpha + b * (1.0f - alpha);
}

static inline float screen( float a, float b )
{
    return 1.0f - (1.0f - a) * (1.0f - b);
}


static inline float parabola( float x )
{
    return 4.0f*x*(1.0f-x);
}

static inline float remaprange(float v, float oldmin, float oldmax,
                               float newmin, float newmax,
                               bool clamp)
{
    float r = (v - oldmin) / (oldmax - oldmin);
    if(clamp) r = clamp01(r);
    return newmin*(1.0f-r) + newmax*r;
}


static inline float smoothramp( float m, float d, float x )
{
    if( x>m ) return x;

    const float a = 2.0f*d - m;
    const float b = 2.0f*m - 3.0f*d;
    const float z = x/m;

    return ( a*z + b )*z*z + d;
}

static inline float hash( int n )
{
    n = (n << 13) ^ n;
    n = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;
    return (float)n/(float)0x7fffffff;
}

//------------------------------------------------------------------------------------------------
// bezier functions
//------------------------------------------------------------------------------------------------

// point
static inline vec3 bezierP( const vec3 * const p, float t )
{
    const float a =            (1.0f-t)*(1.0f-t)*(1.0f-t);
    const float b = 3.0f*t*    (1.0f-t)*(1.0f-t);
    const float c = 3.0f*t*t*  (1.0f-t);
    const float d =      t*t*t;
    return a*p[0] + b*p[1] + c*p[2] + d*p[3];
}

// derivative/tangent
static inline vec3 bezierT( const vec3 * const p, float t )
{
    const float a = -3.0f +  6.0f*t - 3.0f*t*t;
    const float b =  3.0f - 12.0f*t + 9.0f*t*t;
    const float c =          6.0f*t - 9.0f*t*t;
    const float d =                   3.0f*t*t;
    return a*p[0] + b*p[1] + c*p[2] + d*p[3];
}

// second derivative/normal
static inline vec3 bezierN( const vec3 * const p, float t )
{
    const float a =    6.0f -  6.0f*t;
    const float b =  -12.0f + 18.0f*t;
    const float c =    6.0f - 18.0f*t;
    const float d =            6.0f*t;
    return a*p[0] + b*p[1] + c*p[2] + d*p[3];
}

static inline void bezierFrame( vec3 & uu, vec3 & vv, vec3 & ww, const vec3 * const p, float t )
{
    ww = normalize(     bezierT( p, t ));
    uu = normalizeSafe( bezierN( p, t ) );
    vv = normalizeSafe( cross( ww, uu ) );
}

// tangent at t = 1
static inline vec3 bezierTAtEnd( const vec3 * const p )
{
    return 3.0f*(p[3] - p[2]);
}

// second derivative/normal at t = 1
static inline vec3 bezierNAtEnd( const vec3 * const p)
{
    return 6.0f*p[1] -12.0f*p[2] + 6.0f*p[3];
}

static inline mat3x3 bezierFrame( const vec3 * const p, float t )
{
    const vec3 ww = normalize(     bezierT( p, t ) );
    const vec3 uu = normalizeSafe( bezierN( p, t ) );
    const vec3 vv = normalizeSafe( cross( ww, uu ) );
    return mat3x3( uu.x, vv.x, ww.x,
                   uu.y, vv.y, ww.y,
                   uu.z, vv.z, ww.z );
}


static inline mat3x3 bezierFrameAtEnd( const vec3 * const p )
{
    const vec3 ww = normalize(     bezierTAtEnd( p ));
    const vec3 uu = normalizeSafe( bezierNAtEnd( p ) );
    const vec3 vv = normalizeSafe( cross( ww, uu ) );

    return mat3x3( uu.x, vv.x, ww.x,
                   uu.y, vv.y, ww.y,
                   uu.z, vv.z, ww.z );
}

//------------------------------------------------------------------------------------------------
// geometrical functions
//------------------------------------------------------------------------------------------------

// p is a point in space (hopefully inside the quad  {a,b,c,d} quad (a,b,c,d are given in order
// along the perimeter of the quad. This function will return the bilinear coordiantes uv that
// would produce p by interpolating {a, b, c, d}. It returns vec2(-1.0f) if p is outside the quad.
vec2 getUVFromQuad( const vec3 & p, const vec3 & a, const vec3 & b, const vec3 & c, const vec3 & d );

//------------------------------------------------------------------------------------------------
// noise functions
//------------------------------------------------------------------------------------------------

float noise1( const float x );
float noise1( const vec2 & p );
float noise1( const vec3 & p );
float cellnoise1( const float x );
float cellnoise1( const vec2 & p );
float cellnoise1( const vec3 & p );
vec3  cellnoise3( const vec3 & p );

//------------------------------------------------------------------------------------------------
// some fbm constructions
//------------------------------------------------------------------------------------------------

float fbm1( const float  p, int oct );
float fbm1( const vec2 & p, int oct );
float fbm1( const vec3 & p, int oct );
vec2  fbm2( const float  p, int oct );
vec2  fbm2( const vec2 & p, int oct );
vec3  fbm3( const float  p, int oct );
vec3  fbm3( const vec2 & p, int oct );
vec3  fbm3( const vec3 & p, int oct );

inline float sfbm1( const float  p, int oct ) { return -1.0f+2.0f*fbm1(p,oct); }
inline float sfbm1( const vec2 & p, int oct ) { return -1.0f+2.0f*fbm1(p,oct); }
inline float sfbm1( const vec3 & p, int oct ) { return -1.0f+2.0f*fbm1(p,oct); }
inline vec2  sfbm2( const float  p, int oct ) { return -1.0f+2.0f*fbm2(p,oct); }
inline vec2  sfbm2( const vec2 & p, int oct ) { return -1.0f+2.0f*fbm2(p,oct); }
inline vec3  sfbm3( const float  p, int oct ) { return -1.0f+2.0f*fbm3(p,oct); }
inline vec3  sfbm3( const vec2 & p, int oct ) { return -1.0f+2.0f*fbm3(p,oct); }
inline vec3  sfbm3( const vec3 & p, int oct ) { return -1.0f+2.0f*fbm3(p,oct); }


// Voronoi

void voronoiSquared( const vec2 & p, float * resD, vec2 & resP, ivec2 & resID );
void voronoiSquared( const vec3 & p, float * resD, vec3 & resP, vec3 & resC, ivec3 &  resID );

//------------------------------------------------------------------------------------------------
// Functions inspired by slim Transition node
//------------------------------------------------------------------------------------------------

static inline float blackToPattern( float pattern, float transition ) 
{
    return smoothstep( 1.0f - transition, 1.0f, pattern );
}

static inline float blackToPatternMultiply( float pattern, float transition ) 
{
    return clamp01( smoothstep (1.0f - transition, 1.0f, pattern) * transition );
}

static inline float patternToWhite( float pattern, float transition ) 
{
    return smoothstep( 0.0f, 1.0f - transition, pattern);
}

static inline float patternToWhiteScreen( float pattern, float transition ) 
{
    return screen( smoothstep (0.0f, 1.0f - transition, pattern), transition );
}

static inline float blackToWhite( float pattern, float transition ) 
{
    return smoothstep( 0.0f, 1.0f, pattern + 2.0f*(transition-0.5f) );
}

//------------------------------------------------------------------------------------------------
// integer functions
//------------------------------------------------------------------------------------------------

static inline int imax( int a, int b ) { return (a>b)?a:b; }
static inline int imin( int a, int b ) { return (a<b)?a:b; }

#endif